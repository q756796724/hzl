package com.fanqie.fanqieconfig.rest;

import com.alibaba.fastjson.JSONObject;
import com.fanqie.fanqieconfig.config.YmlConfig;
import com.fanqie.fanqieconfig.utils.Result;
import com.fanqie.fanqieconfig.utils.StatusCode;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.text.SimpleDateFormat;
import java.util.*;


/**
 * @author forest
 * @date 2022/3/15  0:51
 */
@RestController
public class Controller {
    @Autowired
    private YmlConfig ymlConfig;

    private static LinkedList readLinkedList = new LinkedList<> ();

    private static final Object jieshouCountThreadLock = new Object ();

    private static Map<String, Long> jieshouMap = new HashMap<> ();//<id,longtime>

    private static Long lastReadTime = new Date ().getTime ();//最近一次阅读时间

    private static SimpleDateFormat formatter = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss");

    @GetMapping("/getConfig")
    @ApiOperation(value = "获取配置")
    public Result getConfig() {
        JSONObject jo = new JSONObject ();
        jo.put ("lastTalkName", ymlConfig.getLastTalkName ());
        jo.put ("lastLinkTitle", ymlConfig.getLastLinkTitle ());
        /*System.out.println (ymlConfig.getLastTalkName ());
        System.out.println (ymlConfig.getLastLinkTitle ());
        System.out.println (jo.toJSONString ());*/
        return new Result (StatusCode.SUCCESS, jo);
    }

    @PostMapping("/getConfig")
    @ApiOperation(value = "获取配置")
    public Result getConfig1() {
        JSONObject jo = new JSONObject ();
        jo.put ("lastTalkName", ymlConfig.getLastTalkName ());
        jo.put ("lastLinkTitle", ymlConfig.getLastLinkTitle ());
        /*System.out.println (ymlConfig.getLastTalkName ());
        System.out.println (ymlConfig.getLastLinkTitle ());
        System.out.println (jo.toJSONString ());*/
        return new Result (StatusCode.SUCCESS, jo);
    }

    @PostMapping("/setConfig")
    @ApiOperation(value = "设置配置")
    public Result setConfig(@RequestBody String json) {

        JSONObject jo = JSONObject.parseObject (json);
        if (jo.containsKey ("lastTalkName") && jo.containsKey ("lastLinkTitle")) {
            if (!readLinkedList.contains (jo)) {
                if (readLinkedList.size () >= 50) {
                    readLinkedList.removeFirst ();
                    readLinkedList.removeFirst ();
                    readLinkedList.removeFirst ();
                    readLinkedList.removeFirst ();
                    readLinkedList.removeFirst ();
                }
                readLinkedList.add (jo);

                //System.out.println ("setConfig"+jo.getString ("lastTalkName"));
                ymlConfig.setLastTalkName (jo.getString ("lastTalkName"));
                //System.out.println ("setConfig"+jo.getString ("lastLinkTitle"));
                ymlConfig.setLastLinkTitle (jo.getString ("lastLinkTitle"));
                return new Result (StatusCode.SUCCESS, "");
            }
        }

        return new Result (StatusCode.ERROR, "");
    }

    /*@PostMapping("/setAppAlive")
    @ApiOperation(value = "设置配置")
    public Result setAppAlive(String serial) {
        if(serial!=null&&!StringUtils.isEmpty (serial)){
            HashMap map=ymlConfig.getAppAliveMap ();
            map.put (serial,new Date ().getTime ());
            ymlConfig.setAppAliveMap (map);
        }
        return new Result(StatusCode.SUCCESS, "");
    }*/

    /*@PostMapping("/getAppAlive")
    @ApiOperation(value = "获取配置")
    public Result getAppAlive(String serial) {
        JSONObject jo=new JSONObject ();
        HashMap map=ymlConfig.getAppAliveMap ();
        if(map.containsKey (serial)&&new Date ().getTime ()-Long.parseLong (map.get (serial)+"")<5*60*1000){
            jo.put ("boolean",true);
        }else{
            jo.put ("boolean",false);
        }
        return new Result(StatusCode.SUCCESS, jo);
    }*/

    @GetMapping("/addjieshouCount")
    @ApiOperation(value = "增加接收人数")
    public Result addjieshouCount(String phoneNum) {
        if (phoneNum == null) {
            return new Result (StatusCode.SUCCESS, new JSONObject ());
        }
        JSONObject jo = new JSONObject ();
        synchronized (jieshouCountThreadLock) {
            jieshouMap.put (phoneNum, new Date ().getTime ());
        }
        jo.put ("jieshouCount", getjieshouCount (2, null));
        System.out.println (formatter.format (new Date ()) + "-----候命中------phoneNum:" + phoneNum);
        return new Result (StatusCode.SUCCESS, jo);
    }

    @GetMapping("/reducejieshouCount")
    @ApiOperation(value = "减少接收人数")
    public Result reducejieshouCount(String phoneNum) {
        if (phoneNum == null) {
            return new Result (StatusCode.SUCCESS, new JSONObject ());
        }
        JSONObject jo = new JSONObject ();
        synchronized (jieshouCountThreadLock) {
            jieshouMap.remove (phoneNum);
        }
        jo.put ("jieshouCount", getjieshouCount (2, null));
        System.out.println (formatter.format (new Date ()) + "-----浏览中-----phoneNum:" + phoneNum);
        return new Result (StatusCode.SUCCESS, jo);
    }

    @GetMapping("/getjieshouCount")
    @ApiOperation(value = "获取接收人数")
    public Result getjieshouCount(Integer type, String phoneNum) {
        synchronized (jieshouCountThreadLock) {
            JSONObject jo = new JSONObject ();
            if (type == null) {//使旧版获取不到数量
                jo.put ("jieshouCount", 0);
                return new Result (StatusCode.SUCCESS, jo);
            }
            if (type.equals (1)) {//排队等待阅读时
                if (new Date ().getTime () - lastReadTime < 60000) {
                    //阅读间隔少于一分钟
                    System.out.println (formatter.format (new Date ()) + "-----等待中-----phoneNum:" + phoneNum);
                    jo.put ("jieshouCount", 0);
                    return new Result (StatusCode.SUCCESS, jo);
                }
            }
            Iterator<String> iterator = jieshouMap.keySet ().iterator ();
            int count = 0;
            while (iterator.hasNext ()) {
                String key = iterator.next ();
                System.out.println (key);
                if (new Date ().getTime () - jieshouMap.get (key) < 30000) {
                    count++;
                } else {
                    jieshouMap.remove (key);
                }
            }
            if (type.equals (1) && count > 0) {
                System.out.println (formatter.format (new Date ()) + "-----进入-----phoneNum:" + phoneNum);
                lastReadTime = new Date ().getTime ();
            }
            jo.put ("jieshouCount", count);
            return new Result (StatusCode.SUCCESS, jo);
        }
    }
}

